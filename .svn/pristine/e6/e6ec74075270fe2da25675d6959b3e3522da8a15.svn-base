package javagames.main;

import javagames.gameobjects.*;
import javagames.util.*;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.LinkedList;


public class WorldSpace extends SimpleFramework {
    private float charSpeed;
	private Vector2f cam;
    private Point point;
    private Player player;
    private Vector2f playerWorldPos;
    private Background background;
    private int level;
	private int offsetMaxX;
	private int offsetMaxY;
	private int offsetMinX;
	private int offsetMinY;
	private LinkedList<Bullet> lasers;
	private LinkedList<Enemy> enemies;
	private LinkedList<Enemy> deadEnemies;

    private WorldSpace() {
        appBackground = Color.WHITE;
        appBorder = Color.LIGHT_GRAY;
        appFont = new Font("Courier New", Font.PLAIN, 14);
        appBorderScale = 1.0f;
        appFPSColor = Color.BLACK;
        appWidth = 1280;
        appHeight = 720;
        appMaintainRatio = true;
        appSleep = 10L;
        appTitle = "SuperNova";
        appWorldWidth = 16.0f;
        appWorldHeight = 9.0f;
        viewFPS = true;
    }

    @Override
    protected void initialize() {
        //used a vector2f to have a time containing object with different fields
        level = 1;
        lasers = new LinkedList<>();
        enemies = new LinkedList<>();
        deadEnemies = new LinkedList<>();
        initBackground();
        initPlayer();
        
		cam = new Vector2f(appWidth/2,appHeight/2);
		offsetMaxX = background.getSprite().getWidth() - appWidth;
		offsetMaxY = background.getSprite().getHeight() - appHeight;
		offsetMinX = 0;
		offsetMinY = 0;
        super.initialize();
        
        enemies.add(new Enemy(player.position));
    }

    protected void initBackground(){
    	background = new Background();
    }
    
    protected void initPlayer(){
    	player = new Player();
        charSpeed = 500.0f;
        //INITIAL PLAYER POSITION
        player.position.x = -3.0f;
        player.position.y = -61.0f;

    }


    @Override
    protected void processInput(float delta) {
        super.processInput(delta);
        point = mouse.getPosition();
        	if(mouse.buttonDownOnce(1)){
        		if(player.getEquippedWeapon().getCharge() != player.getEquippedWeapon().getCapacity()){
        			player.shoot();
        			lasers.add(new Bullet(player.getEquippedWeapon().createSpread(player.getAngle()), player.position.x, player.position.y,
        					player.getEquippedWeapon().barrelAngle(), player.getEquippedWeapon().barrelLoc()));
        		}
        	}
        
            //player movement
            //up and left
            if (keyboard.keyDown(KeyEvent.VK_W) && keyboard.keyDown(KeyEvent.VK_A)) {
                player.isWalking = true;
                player.velocity = new Vector2f(-charSpeed / 2 * delta, charSpeed / 2 * delta);
            }
            //up and right
            else if (keyboard.keyDown(KeyEvent.VK_W) && keyboard.keyDown(KeyEvent.VK_D)) {
                player.isWalking = true;
                player.velocity = new Vector2f(charSpeed / 2 * delta, charSpeed / 2 * delta);
            }
            //down and left
            else if (keyboard.keyDown(KeyEvent.VK_S) && keyboard.keyDown(KeyEvent.VK_A)) {
                player.isWalking = true;
                player.velocity = new Vector2f(-charSpeed / 2 * delta, -charSpeed / 2 * delta);
            }
            //down and right
            else if (keyboard.keyDown(KeyEvent.VK_S) && keyboard.keyDown(KeyEvent.VK_D)) {
                player.isWalking = true;
                player.velocity = new Vector2f(charSpeed / 2 * delta, -charSpeed / 2 * delta);
            }
            //no diagonals
            else {
                //up
                if (keyboard.keyDown(KeyEvent.VK_W)) {
                    player.isWalking = true;
                    player.velocity.y = charSpeed * delta;
                }
                //down
                else if (keyboard.keyDown(KeyEvent.VK_S)) {
                    player.isWalking = true;
                    player.velocity.y = -charSpeed * delta;
                } else {
                    player.velocity.y = 0.0f;
                }
                //left
                if (keyboard.keyDown(KeyEvent.VK_A)) {
                    player.isWalking = true;
                    player.velocity.x = -charSpeed * delta;
                }
                //right
                else if (keyboard.keyDown(KeyEvent.VK_D)) {
                    player.isWalking = true;
                    player.velocity.x = charSpeed * delta;
                } else {
                    player.velocity.x = 0.0f;
                }
                
                
            }
            
            if(player.velocity.x == 0.0f && player.velocity.y == 0.0f){
            	player.isWalking = false;	
            }
            
            playerWorldPos = getViewportTransform().mul(player.position);
    		cam.x = playerWorldPos.x - appWidth/2;
    		cam.y = playerWorldPos.y - appHeight/2;
    		if( cam.x > offsetMaxX)
    			cam.x = offsetMaxX;
    		else if( cam.x < offsetMinX)
    			cam.x = offsetMinX;
    		if( cam.y > offsetMaxY)
    			cam.y = offsetMaxY;
    		else if( cam.y < offsetMinY)
    			cam.y = offsetMinY;


            if (keyboard.keyDownOnce(KeyEvent.VK_F1)) {
                viewFPS = !viewFPS;
            }
        }

    @Override
    protected void updateObjects(float delta) {
        player.updateWorld(delta, getReverseViewportTransform().mul(new Vector2f(point.x+cam.x, point.y+cam.y)));

        for(int i=0;i<enemies.size();++i){
        	Enemy enemy = enemies.get(i);
        	enemy.updateWorld(delta, player.position);
        	if(enemy.inRange){
        		if(enemy.canShoot && enemy.shoot()){
        		lasers.add(new Bullet(enemy.getEquippedWeapon().createSpread(enemy.getAngle()), enemy.position.x, enemy.position.y,
    					enemy.getEquippedWeapon().barrelAngle(), enemy.getEquippedWeapon().barrelLoc()));
        		}
        	}
        }
        for(int i=0;i<lasers.size();++i){
        	lasers.get(i).updateWorld(delta);
        	//System.out.println("Laser: "+i+"  Pos: "+lasers.get(i).position.x+", "+lasers.get(i).position.x);
        }
        super.updateObjects(delta);
    }


    @Override
    protected void render(Graphics g) {
    	Graphics2D g2d = (Graphics2D)g;
    	g2d.translate((int)-cam.x, (int)-cam.y);
    	background.render(g2d, getViewportTransform());
    	player.render(g, getViewportTransform());
       	
    	renderEnemies(g);
    	renderLasers(g);
 
    	drawUI(g);
        super.render(g);
    }


    private void drawUI(Graphics g){
    	g.setColor(new Color(0,0,0,100));
    	g.fillRect((int)cam.x,(int)cam.y, appWidth, 20);
    	g.fillRect((int)cam.x, (int)cam.y+appHeight-40, appWidth, 20);
    	g.setColor(Color.green);
    	for(int i=0;i<player.health;i++){
    		g.drawRect((int)cam.x+i*20,(int)cam.y, 20, 20);
    	}
    	
    	g.drawRect((int)cam.x+(appWidth/2)-50,(int)cam.y, 100, 20);
    	for(int i=0;i<player.getEquippedWeapon().getCharge();++i){
    		g.fillRect((int)cam.x+(appWidth/2)-50+(i*20),(int)cam.y, 20, 20);
    	}
    	
    }
    
    private void renderLasers(Graphics g){
    	for(int i=0;i<lasers.size();++i){
    		lasers.get(i).render(g, getViewportTransform());
    	}
    }
    
    private void renderEnemies(Graphics g){
    	for(int i=0;i<enemies.size();++i){
    		enemies.get(i).render(g, getViewportTransform());
    	}
    }


    @Override
    protected void terminate() {
        super.terminate();
    }

    public static void main(String[] args) {
        launchApp(new WorldSpace());
    }
}
